/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.user.profile;

import view.util.PhotoRenderer;
import executable.Client;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.Iterator;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import server.actors.AbstractActor;
import server.actors.Group;
import server.actors.actions.Photo;
import server.actors.User;
import util.Constants;
import view.util.UserRenderer;
import util.Validator;
import view.user.Profile;

/**
 *
 * @author David
 */
public class Info extends JPanel {

    private final Client client;
    private final AbstractActor actor;
    private Group group = null;
    
    private final Profile profile;
    private String selected_file = "";

    private final boolean isOwner;
    
    private DefaultListModel<Photo> photoModel;
    private DefaultListModel<User> friendModel;
    
    public Info(Client c, Profile profile) {
        this.client = c;
        this.actor = c.getUser();
        this.profile = profile;
        isOwner = Validator.isSameEmail(actor.getId(), client.getUser().getId());
        
        photoModel = new DefaultListModel<>();
        friendModel = new DefaultListModel<>();
        
        initComponents();
    }

    public Info(Client c, AbstractActor actor, Profile profile) {
        this.client = c;
        this.actor = actor;
        this.profile = profile;
        if(actor instanceof User){
            isOwner = Validator.isSameEmail(actor.getId(), client.getUser().getId());
        } else {
            group = (Group) actor;
            isOwner = group.isAdmin(client.getUser());
        }
        photoModel = new DefaultListModel<>();
        friendModel = new DefaultListModel<>();
        
        initComponents();
    }
    
    public void loadPhotos(boolean reload){
        if(reload){
            photoModel.clear();
            photoLabel.setText("<html><b>Fotos: </b>(" + actor.getPhotos().size() + ")</html>");
        }
        Iterator it = actor.getPhotos().iterator();
        int i;
        for(i = 0; it.hasNext(); i++){
            photoModel.add(i,(Photo) it.next());
        }
        photoList.setCellRenderer(new PhotoRenderer());
    }
    
    public void listFriends(){
        Iterator it = actor.getRelatives().iterator();
        int i;
        for(i = 0; it.hasNext(); i++) {
            friendModel.add(i, (User) it.next());
        }
        friendsList.setCellRenderer(new UserRenderer());
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        emailLabel = new javax.swing.JLabel();
        dobLabel = new javax.swing.JLabel();
        genderLabel = new javax.swing.JLabel();
        friendsLabel = new javax.swing.JLabel();
        friendsPane = new javax.swing.JScrollPane();
        friendsList = new JList<>(friendModel);
        photoFileLabel = new javax.swing.JLabel();
        btSelectPhoto = new javax.swing.JButton();
        photoCommentField = new javax.swing.JTextField();
        photoLabel = new javax.swing.JLabel();
        photoPane = new javax.swing.JScrollPane();
        photoList = new JList<>(photoModel);
        emailLabel1 = new javax.swing.JLabel();
        buttonsPanel = new javax.swing.JPanel();
        btUserPhoto = new javax.swing.JButton();
        btAddPhoto = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 102, 153));
        setPreferredSize(new java.awt.Dimension(1086, 638));

        emailLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        if(actor instanceof User){
            User user = (User) actor;
            emailLabel.setText("<html><b>E-mail: </b>" + user.getId() + "</html>");
        } else {
            emailLabel.setVisible(false);
        }

        dobLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        if(actor instanceof User){
            User user = (User) actor; //why
            dobLabel.setText("<html><b>Data de Nascimento: </b>" + user.getDob() + "</html>");
        } else {
            dobLabel.setText("<html><b>E-mail: </b>" + actor.getId() + "</html>");
        }

        genderLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        if(actor instanceof User){
            User user = (User) actor;
            genderLabel.setText("<html><b>Gênero: </b>" + user.getGender() + "</html>");
        } else {
            genderLabel.setVisible(false);
        }

        friendsLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        if(actor instanceof User){
            friendsLabel.setText("<html><b>" + Constants.BTFRIENDS_TEXT + "</b>: (" + actor.getRelatives().size() + ")");
        } else {
            friendsLabel.setText("<html><b>" + Constants.BTGROUPS_TEXT + "</b>: (" + actor.getRelatives().size() + ")");
        }

        friendsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                friendsListValueChanged(evt);
            }
        });
        friendsPane.setViewportView(friendsList);
        listFriends();

        btSelectPhoto.setText("Selecionar");
        btSelectPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelectPhotoActionPerformed(evt);
            }
        });

        photoCommentField.setText(Constants.NEWPHOTO_COMMENT_TEXT);
        photoCommentField.setToolTipText("Descrição da sua Imagem, máximo de 100 caracteres");
        photoCommentField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                photoCommentFieldMouseClicked(evt);
            }
        });

        photoLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        photoLabel.setText("<html><b>Fotos: </b>(" + actor.getPhotos().size() + ")</html>");

        photoList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                photoListValueChanged(evt);
            }
        });
        photoPane.setViewportView(photoList);
        loadPhotos(false);

        emailLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        emailLabel1.setText("<html><b>Dados Pessoais<b></html>");

        buttonsPanel.setBackground(new java.awt.Color(0, 102, 153));
        buttonsPanel.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

        if(actor instanceof User){
            btUserPhoto.setText("Editar Foto de Perfil");
        } else {
            btUserPhoto.setText("Editar Foto do Grupo");
        }
        btUserPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUserPhotoActionPerformed(evt);
            }
        });
        if(!isOwner){
            btUserPhoto.setVisible(false);
            btUserPhoto.setEnabled(false);
        }
        buttonsPanel.add(btUserPhoto);

        btAddPhoto.setText("Adicionar Nova Foto");
        btAddPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddPhotoActionPerformed(evt);
            }
        });
        if(!isOwner){
            btAddPhoto.setVisible(false);
            btAddPhoto.setEnabled(false);
        }
        buttonsPanel.add(btAddPhoto);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dobLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(genderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(emailLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(emailLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(photoFileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btSelectPhoto))
                                    .addComponent(photoCommentField)
                                    .addComponent(buttonsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(friendsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(friendsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(photoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 1068, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(photoPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1068, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(friendsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dobLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(genderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btSelectPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(photoFileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(photoCommentField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(friendsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(photoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(photoPane, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addContainerGap())
        );

        photoFileLabel.setVisible(false);
        btSelectPhoto.setVisible(false);
        photoCommentField.setVisible(false);
    }// </editor-fold>//GEN-END:initComponents

    private void btAddPhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddPhotoActionPerformed
        if(btUserPhoto.isEnabled()){
            btSelectPhoto.setVisible(true);
            btSelectPhoto.setEnabled(true);
            photoFileLabel.setVisible(true);
            photoFileLabel.setIcon(null);
            photoFileLabel.setText(Constants.DEFAULT_FILE_TEXT);
            photoCommentField.setVisible(true);
            photoCommentField.setText(Constants.NEWPHOTO_COMMENT_TEXT);
            btAddPhoto.setText("Enviar");
            btUserPhoto.setEnabled(false);
        } else { //sends a new photo
            if(selected_file.equals("Inválido") || selected_file.trim().equals("")){
                JOptionPane.showMessageDialog(client, "Arquivo Inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
            } else if(photoCommentField.getText().length() > 100){
                JOptionPane.showMessageDialog(client, "Máximo de 100 caracteres permitidos!", "Aviso", JOptionPane.WARNING_MESSAGE);
            } else {
                btSelectPhoto.setVisible(false);
                btSelectPhoto.setEnabled(false);
                photoFileLabel.setVisible(false);
                photoCommentField.setVisible(false);
                if(actor instanceof Group){
                    actor.addPhoto(new Photo(client.getUser(), selected_file, photoCommentField.getText()));
                } else {
                    actor.addPhoto(new Photo((User) actor, selected_file, photoCommentField.getText()));
                }
                selected_file = "";
                btAddPhoto.setText("Adicionar Nova Foto");
                btUserPhoto.setEnabled(true);
                loadPhotos(true);
            }
        }
    }//GEN-LAST:event_btAddPhotoActionPerformed

    private void btUserPhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUserPhotoActionPerformed
        if(btAddPhoto.isEnabled()){
            btSelectPhoto.setVisible(true);
            btSelectPhoto.setEnabled(true);
            photoFileLabel.setVisible(true);
            photoFileLabel.setIcon(null);
            photoFileLabel.setText(Constants.DEFAULT_FILE_TEXT);
            btUserPhoto.setText("Enviar Nova Imagem de Perfil");
            btAddPhoto.setEnabled(false);
        } else {
            if(selected_file.equals("Inválido") || selected_file.trim().equals("")){
                JOptionPane.showMessageDialog(client, "Arquivo Inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
            } else {
                btSelectPhoto.setVisible(false);
                btSelectPhoto.setEnabled(false);
                photoFileLabel.setVisible(false);
                actor.setIcon(new ImageIcon(selected_file));
                selected_file = "";
                profile.reloadUserPhoto();
                btUserPhoto.setText("Editar Foto de Perfil");
                btAddPhoto.setEnabled(true);
            }
        }
    }//GEN-LAST:event_btUserPhotoActionPerformed

    private void btSelectPhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelectPhotoActionPerformed
        final JFileChooser fc = new JFileChooser(); 
        FileFilter imageFilter = new FileNameExtensionFilter("Arquivos de Imagem", ImageIO.getReaderFileSuffixes());
        fc.setFileFilter(imageFilter);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            selected_file = fc.getSelectedFile().getAbsolutePath();
            if(!selected_file.endsWith(".png") && !selected_file.endsWith(".jpg")){
                selected_file = "Inválido";
            }
            ImageIcon preview = new ImageIcon(selected_file);
            photoFileLabel.setIcon(new ImageIcon(preview.getImage().getScaledInstance(38, 38, Image.SCALE_SMOOTH)));
            photoFileLabel.setText("Arquivo Selecionado: " + selected_file);
        }
    }//GEN-LAST:event_btSelectPhotoActionPerformed

    private void photoListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_photoListValueChanged
        int index = photoList.getSelectedIndex();
        if(index >= 0){
            String[] options = {"Fechar", "Apagar"};
            /*if(isOwner){
                options = {"Apagar"};
            }*/
            JPanel photoPanel = new JPanel();
            JLabel viewPhotoLabel = new JLabel();
            viewPhotoLabel.setIcon(actor.getPhoto(index).getIcon());
            photoPanel.add(viewPhotoLabel);
            JScrollPane scrollPane = new JScrollPane(photoPanel);
            if(actor.getPhoto(index).getIcon().getIconHeight() > this.getHeight() || actor.getPhoto(index).getIcon().getIconWidth() > this.getWidth()){            
                scrollPane.setPreferredSize(this.getPreferredSize());
            }
            int selection = JOptionPane.showOptionDialog(client, scrollPane , actor.getPhoto(index).getComment(), JOptionPane.DEFAULT_OPTION, -1, null, options, options[0]);   
            if(selection == 1){
                if(isOwner){
                    actor.deletePhoto(index);
                    loadPhotos(true);
                } else {
                    JOptionPane.showMessageDialog(client, "Deus está vendo você tentar apagar as fotos dos outros!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_photoListValueChanged

    private void friendsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_friendsListValueChanged
        Toolkit.getDefaultToolkit().beep();
        int index = friendsList.getSelectedIndex();
        if(index >= 0){
            User selected = actor.getRelatives().get(index);
            int confirm = JOptionPane.showConfirmDialog(client, "Você deseja visitar a página de " + selected.getName() + " ?", "Aviso", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (confirm == 0) {
                if(selected.isBlocked(client.getUser())){
                    JOptionPane.showMessageDialog(client, "O usuário lhe bloqueoou!", "Aviso", JOptionPane.WARNING_MESSAGE);
                } else {
                    profile.getHome().getPage().removeAll();
                    profile.getHome().getPage().add(new Profile(client, selected, profile.getHome()));
                    profile.getHome().getPage().revalidate();
                }
            }
        }
    }//GEN-LAST:event_friendsListValueChanged

    private void photoCommentFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_photoCommentFieldMouseClicked
        if(photoCommentField.getText().equals(Constants.NEWPHOTO_COMMENT_TEXT)){
            photoCommentField.setText("");
        }
    }//GEN-LAST:event_photoCommentFieldMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddPhoto;
    private javax.swing.JButton btSelectPhoto;
    private javax.swing.JButton btUserPhoto;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JLabel dobLabel;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel emailLabel1;
    private javax.swing.JLabel friendsLabel;
    private javax.swing.JList<User> friendsList;
    private javax.swing.JScrollPane friendsPane;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JTextField photoCommentField;
    private javax.swing.JLabel photoFileLabel;
    private javax.swing.JLabel photoLabel;
    private javax.swing.JList<Photo> photoList;
    private javax.swing.JScrollPane photoPane;
    // End of variables declaration//GEN-END:variables
}
