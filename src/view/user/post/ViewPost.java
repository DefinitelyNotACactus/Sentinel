/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.user.post;

import executable.Client;
import java.awt.Image;
import java.util.Iterator;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import server.actors.AbstractActor;
import server.actors.Group;
import server.actors.actions.Comment;
import server.actors.actions.Post;
import server.actors.User;
import util.Constants;
import util.Validator;
import view.user.profile.Wall;

/**
 *
 * @author David
 */
public class ViewPost extends JPanel {

    private final Client client;
    private final Wall wall;
    private final Post post;
    
    private final AbstractActor actor;
    
    private final boolean isWallOwner;
    private final boolean isOwner;
    private final boolean isThirdPerson;
    private boolean isEditing = false;
    
    /**
     * Creates new form ViewPost
     * @param c
     * @param actor
     * @param wall
     * @param post
     */    
    public ViewPost(Client c, AbstractActor actor, Wall wall, Post post) {
        client = c;
        this.actor = actor;
        this.post = post;
        this.wall = wall;
        
        if(actor instanceof User){
            isWallOwner = Validator.isSameEmail(client.getUser().getId(), wall.getWallOwner().getId());
            if(isWallOwner){        
                isOwner = true;
            } else {
                isOwner = Validator.isSameEmail(client.getUser().getId(), post.getAuthor().getId());
            }
        } else {
            Group group = (Group) actor;
            if(group.isAdmin(c.getUser())){
                isWallOwner = true;
                isOwner = true;
            } else {
                isWallOwner = false;
                isOwner = Validator.isSameEmail(client.getUser().getId(), post.getAuthor().getId());
            }           
        }
        
        if(actor instanceof User){
            isThirdPerson = !Validator.isSameEmail(post.getAuthor().getId(), wall.getWallOwner().getId());
        } else {
            isThirdPerson = !Validator.isSameEmail(post.getAuthor().getId(), client.getUser().getId());
        }
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textField = new javax.swing.JTextPane();
        titleField = new javax.swing.JTextField();
        userLabel = new javax.swing.JLabel();
        buttonsPanel = new javax.swing.JPanel();
        btDelete = new javax.swing.JButton();
        btEdit = new javax.swing.JButton();
        btComment = new javax.swing.JButton();
        contentPanel = new javax.swing.JPanel();
        commentsPanel = new javax.swing.JPanel();

        textField.setEditable(false);
        textField.setText(post.getText());
        textField.setToolTipText("");

        setBackground(new java.awt.Color(204, 0, 51));

        titleField.setEditable(false);
        titleField.setText(post.getTitle());
        titleField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                titleFieldMouseClicked(evt);
            }
        });

        if(isOwner && !isThirdPerson){
            userLabel.setText("<html>Autor: <b>(Você)</b></html>");
        } else if(post.getAuthor() == null){
            userLabel.setText("<html><b>Autor Excluído</b></html>");
        } else {
            userLabel.setText("<html>Autor: <b>" + post.getAuthor().getName() + "</b></html>");
        }

        buttonsPanel.setBackground(new java.awt.Color(204, 0, 51));
        buttonsPanel.setLayout(new java.awt.GridLayout(1, 0));

        btDelete.setText("Apagar");
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });
        buttonsPanel.add(btDelete);
        if(!isOwner){
            btDelete.setEnabled(false);
        }

        btEdit.setText("Editar");
        btEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditActionPerformed(evt);
            }
        });
        buttonsPanel.add(btEdit);
        if(!isOwner){
            btEdit.setEnabled(false);
        }

        btComment.setText("Responder");
        btComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCommentActionPerformed(evt);
            }
        });
        buttonsPanel.add(btComment);

        contentPanel.setBackground(new java.awt.Color(204, 0, 51));
        contentPanel.setLayout(new javax.swing.BoxLayout(contentPanel, javax.swing.BoxLayout.LINE_AXIS));
        if(post.getIcon() != null){
            JLabel image = new JLabel();
            image.setIcon(new ImageIcon(post.getIcon().getImage().getScaledInstance(200, 200, Image.SCALE_SMOOTH)));
            contentPanel.add(image);
        }
        contentPanel.add(new JScrollPane(textField));

        commentsPanel.setLayout(new javax.swing.BoxLayout(commentsPanel, javax.swing.BoxLayout.PAGE_AXIS));
        loadComments();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(commentsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(userLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(titleField))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(commentsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void titleFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_titleFieldMouseClicked
        if(titleField.getText().equals(Constants.NEWPOST_TITLE_TEXT)){
            titleField.setText("");
        }
    }//GEN-LAST:event_titleFieldMouseClicked

    private void btCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCommentActionPerformed
        commentsPanel.removeAll();
        commentsPanel.add(new NewComment(client, post));
        loadComments();
        commentsPanel.revalidate();
        btComment.setEnabled(false);
    }//GEN-LAST:event_btCommentActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        if(isThirdPerson && actor instanceof User){
            User user = (User) actor;
            user.getPostsFromOthers().remove(post);
        } else {
            actor.getPosts().remove(post);
        }
        this.getParent().revalidate();
        this.getParent().add(new NewPost(client, client.getUser(), wall));
        this.getParent().remove(this);
        wall.listPosts(true);
    }//GEN-LAST:event_btDeleteActionPerformed

    private void btEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditActionPerformed
        if(!isEditing){
            if(actor instanceof Group){
                Group group = (Group) actor;
                if(group.isAdmin(client.getUser()) && !post.getAuthor().getId().equals(client.getUser().getId())){
                    int confirm = JOptionPane.showConfirmDialog(client, "Você quer apagar " + post.getAuthor().getName() + " como autor?", "Aviso", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (confirm == 0) {
                        post.setAuthor(Constants.DEFAULT_USER);
                    }
                }
            }
            titleField.setEditable(true);
            textField.setEditable(true);
            btEdit.setText("Salvar");
            isEditing = true;
        } else {
            titleField.setEditable(false);
            textField.setEditable(false);
            post.setTitle(titleField.getText());
            post.setText(textField.getText());
            btEdit.setText("Editar");
            wall.listPosts(true);
            isEditing = false;
        }
    }//GEN-LAST:event_btEditActionPerformed

    public void loadComments(){
        Iterator it = post.getComments().iterator();
        while(it.hasNext()){
            commentsPanel.add(new ViewComment(client, post, (Comment) it.next(), isWallOwner));
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btComment;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btEdit;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JPanel commentsPanel;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JTextPane textField;
    private javax.swing.JTextField titleField;
    private javax.swing.JLabel userLabel;
    // End of variables declaration//GEN-END:variables
}
